package models

import (
	"encoding/json"
	"errors"
	"net/http"
	"time"

	"github.com/gorilla/schema"

	"strings"

	"sort"

	validator "gopkg.in/go-playground/validator.v9"
	runner "gopkg.in/mgutz/dat.v1/sqlx-runner"
	redis "gopkg.in/redis.v5"
)

// {{.TableNameTitle}} Struct
type {{.TableNameTitle}} struct {
  {{range $index, $column := .Columns}}{{$column.ColumnNameTitle}} {{$column.ColumnType}} `db:"{{$column.ColumnName}}" json:"{{$column.ColumnNameTitle}}"`
  {{end}}
}

type {{.TableNameTitle}}s []*{{.TableNameTitle}}

type {{.TableNameCamel}}Helper struct {
	DB            *runner.DB
	Cache         *redis.Client
	Validator     *validator.Validate
	structDecoder *schema.Decoder
	fieldNames    []string
	orderBy       string
}

func {{.TableNameTitle}}Helper() *{{.TableNameCamel}}Helper {
	if {{.TableNameCamel}}HelperGlobal == nil {
		panic("{{.TableNameSplit}} model is not initialised")
	}
	return {{.TableNameCamel}}HelperGlobal
}

func new{{.TableNameTitle}}Helper(db *runner.DB, redis *redis.Client, validate *validator.Validate) *{{.TableNameCamel}}Helper {
	helper := &{{.TableNameCamel}}Helper{}
	helper.DB = db
	helper.Cache = redis
	helper.Validator = validate

  
	// Fields
  	fieldnames := []string{ "{{.TableID}}", {{.ColumnsDBStrings}} }
	sort.Strings(fieldnames) // sort it makes searching it work correctly
	helper.fieldNames = fieldnames
	helper.orderBy = "date_created, date_modified"

	return helper
}

func (h *{{.TableNameCamel}}Helper) New() *{{.TableNameTitle}} {
	record := &{{.TableNameTitle}}{}
	// check DateCreated
	record.DateCreated = time.Now()
	return record
}

func (h *{{.TableNameCamel}}Helper) NewFromRequest(req *http.Request) (*{{.TableNameTitle}}, error) {
	record := h.New()
	err := h.UpdateFromRequest(req, record)
	if err != nil {
		return nil, err
	}
	return record, nil
}

func (h *{{.TableNameCamel}}Helper) LoadAndUpdateFromRequest(req *http.Request) (*{{.TableNameTitle}}, error) {
	// dummyPack is used to get the pack ID from the request and also to check the date modified
	newRecord, err := h.NewFromRequest(req)
	if err != nil {
		return nil, err
	}

	if newRecord.{{.TableNameTitle}}ID {{.LTEqStr}} 0 {
		return nil, errors.New("The {{.TableNameSplit}} failed to load because {{.TableNameTitle}}ID was not found in the request.")
	}

	record, err := h.Load(newRecord.{{.TableNameTitle}}ID)
	if newRecord.DateModified.After(record.DateModified) {
    errMsg := "The {{.TableNameSplit}} record failed to save because the DateModified value in the database is more recent then DateModified value on the request.\n"
		errMsg += "request: [" + newRecord.DateModified.String() + "]\n"
		errMsg += "database: [" + record.DateModified.String() + "]\n"
		return nil, errors.New(errMsg)
	}

	newRecord.{{.TableNameTitle}}ID = record.{{.TableNameTitle}}ID             // this shouldn't have changed
	newRecord.DateCreated = record.DateCreated // nor should this.

	return record, nil
}

func (h *{{.TableNameCamel}}Helper) UpdateFromRequest(req *http.Request, record *{{.TableNameTitle}}) error {
	contentType := req.Header.Get("Content-Type")
	if strings.Contains(contentType, "application/json") {
		// working with json
		decoder := json.NewDecoder(req.Body)
		err := decoder.Decode(record)
		if err != nil {
			return err
		}
	} else {
		// working with form values
		err := req.ParseForm()
		if err != nil {
			return err
		}

		err = h.structDecoder.Decode(record, req.PostForm)
		if err != nil {
			return err
		}
	}
	return nil
}

func (h *{{.TableNameCamel}}Helper) All() ({{.TableNameTitle}}s, error) {
	var records {{.TableNameTitle}}s
	err := h.DB.Select("*").
		From("{{.TableName}}").
		OrderBy(h.orderBy).
		QueryStructs(&records)

	if err != nil {
		return nil, err
	}

	return records, nil
}

func (h *{{.TableNameCamel}}Helper) Paged(pageNum int, itemsPerPage int) ({{.TableNameTitle}}s, error) {
	var records {{.TableNameTitle}}s
	records, err := h.PagedBy(pageNum, itemsPerPage, "date_created") // date_created should be the most consistant because it doesn't change
	if err != nil {
		return nil, err
	}

	return records, nil
}

func (h *{{.TableNameCamel}}Helper) PagedBy(pageNum int, itemsPerPage int, orderByFieldName string) ({{.TableNameTitle}}s, error) {
	i := sort.SearchStrings(h.fieldNames, orderByFieldName)
	// check the orderby exists within the fields as this could be an easy sql injection hole.
	if !(i {{.LTStr}} len(h.fieldNames) && h.fieldNames[i] == orderByFieldName) { // NOT
		return nil, errors.New("field name [" + orderByFieldName + "]  isn't a valid field name")
	}

	var records {{.TableNameTitle}}s
	err := h.DB.Select("*").
		From("{{.TableName}}").
		OrderBy(orderByFieldName). 
		QueryStructs(&records)

	if err != nil {
		return nil, err
	}

	return records, nil
}

func (h *{{.TableNameCamel}}Helper) Load(id int) (*{{.TableNameTitle}}, error) {
	record := &{{.TableNameTitle}}{}
	err := h.DB.
		Select("*").
		From("{{.TableName}}").
		Where("{{.TableID}} = $1", id).
		QueryStruct(record)

	if err != nil {
		return nil, err
	}

	return record, nil
}

//func (h *{{.TableNameCamel}}Helper) ByPackID(id int) ({{.TableNameTitle}}s, error) {
//	var records {{.TableNameTitle}}s
//	err := h.DB.Select("*").
//		From("day").
//		Where("pack_id = $1", id).
//		OrderBy("day_number").
//		QueryStructs(&records)
//
//	if err != nil {
//		return nil, err
//	}
//	return records, nil
//}

func (h *{{.TableNameCamel}}Helper) Save(record *{{.TableNameTitle}}) error {
	// date created always should be set, if its null just set it to now.
	if !record.DateCreated.IsZero() {
		record.DateCreated = time.Now()
	}

	// was just modified
	record.DateModified = time.Now()

	// check validation
	_, err := h.Validate(record)
	if err != nil {
		return err
	}

	err = h.save(record)
  if err != nil {
		return err
	}

	return err
}

func (h *{{.TableNameCamel}}Helper) SaveMany(records {{.TableNameTitle}}s) error {
	for _, record := range records {
		// date created always should be set, if its null just set it to now.
		if record.DateCreated.IsZero() {
			record.DateCreated = time.Now()
		}

		// was just modified
		record.DateModified = time.Now()

		// check validation
		_, err := h.Validate(record)
    if err != nil {
      return err
    }
  }

	for _, record := range records {
    // everything is validated so now re loop and do the actual saving... this should probably be a tx that can just rollback
		err := h.save(record)
		if err != nil {
			return err
		}
	}

	return nil
}

func (h *{{.TableNameCamel}}Helper) save(record *{{.TableNameTitle}}) error {
	err := h.DB.
		Upsert("{{.TableName}}").
		Columns({{.ColumnsDBStrings}}).
		Values({{.ColumnsRecordPrefixedStrings}}).
    Where("{{.TableID}}=$1", record.{{.TableNameTitle}}ID).
		Returning("{{.TableID}}").
		QueryStruct(record)

	if err != nil {
		return err
	}

  //if len(record.DayItems) > 0 {
  //	for _, dayItem := range record.DayItems {
  //		dayItem.DayID = record.DayID // may have just been set
  //	}
  //	dayItemHelper := NewDayItemHelper(h.DB, h.Cache)
  //	err := dayItemHelper.SaveMany(record.DayItems)
  //	if err != nil {
  //		return err
  //	}
  //}

	return nil
}

// Validate a record
func (h *{{.TableNameCamel}}Helper) Validate(record *{{.TableNameTitle}}) (bool, error) {
	validationErrors := h.Validator.Struct(record)
	if validationErrors != nil {
		return false, validationErrors
	}
	return true, nil
}

func (h *{{.TableNameCamel}}Helper) Delete(recordID int) (bool, error) {
	result, err := h.DB.
		DeleteFrom("{{.TableName}}").
    Where("{{.TableID}}=$1", recordID).
		Exec()

	if err != nil {
		return false, err
	}

	return (result.RowsAffected > 0), nil
}
